2021-01-22 13:42:29 INFO  org.hibernate.validator.internal.util.Version [HV000001: Hibernate Validator 5.4.1.Final]
2021-01-22 13:42:29 INFO  com.xietian.graduated.GraduatedApplication [Starting GraduatedApplication using Java 1.8.0_271 on DESKTOP-CKPKB5K with PID 2652 (D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes started by Administrator in D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated)]
2021-01-22 13:42:29 INFO  com.xietian.graduated.GraduatedApplication [No active profile set, falling back to default profiles: default]
2021-01-22 13:42:29 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable]
2021-01-22 13:42:29 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG']
2021-01-22 13:42:30 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Multiple Spring Data modules found, entering strict repository configuration mode!]
2021-01-22 13:42:30 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Bootstrapping Spring Data Redis repositories in DEFAULT mode.]
2021-01-22 13:42:30 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.]
2021-01-22 13:42:31 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat initialized with port(s): 8088 (https) 8086 (http)]
2021-01-22 13:42:31 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 13:42:31 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["http-nio-8086"]]
2021-01-22 13:42:31 INFO  org.apache.catalina.core.StandardService [Starting service [Tomcat]]
2021-01-22 13:42:31 INFO  org.apache.catalina.core.StandardEngine [Starting Servlet engine: [Apache Tomcat/9.0.39]]
2021-01-22 13:42:31 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring embedded WebApplicationContext]
2021-01-22 13:42:31 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [Root WebApplicationContext: initialization completed in 1431 ms]
2021-01-22 13:42:32 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor [Initializing ExecutorService 'applicationTaskExecutor']
2021-01-22 13:42:32 INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [LiveReload server is running on port 35729]
2021-01-22 13:42:32 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler [Initializing ExecutorService 'taskScheduler']
2021-01-22 13:42:32 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 13:42:32 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["http-nio-8086"]]
2021-01-22 13:42:32 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat started on port(s): 8088 (https) 8086 (http) with context path '']
2021-01-22 13:42:32 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Context refreshed]
2021-01-22 13:42:32 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Found 1 custom documentation plugin(s)]
2021-01-22 13:42:32 INFO  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner [Scanning for api listing references]
2021-01-22 13:42:33 INFO  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator [Generating unique operation named: getByIdUsingGET_1]
2021-01-22 13:42:33 INFO  com.xietian.graduated.GraduatedApplication [Started GraduatedApplication in 4.089 seconds (JVM running for 5.352)]
2021-01-22 13:42:37 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Starting...]
2021-01-22 13:42:38 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Start completed.]
2021-01-22 13:44:09 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring DispatcherServlet 'dispatcherServlet']
2021-01-22 13:44:09 INFO  org.springframework.web.servlet.DispatcherServlet [Initializing Servlet 'dispatcherServlet']
2021-01-22 13:44:09 INFO  org.springframework.web.servlet.DispatcherServlet [Completed initialization in 1 ms]
2021-01-22 13:47:47 INFO  org.hibernate.validator.internal.util.Version [HV000001: Hibernate Validator 5.4.1.Final]
2021-01-22 13:47:47 INFO  com.xietian.graduated.GraduatedApplication [Starting GraduatedApplication using Java 1.8.0_271 on DESKTOP-CKPKB5K with PID 10456 (D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes started by Administrator in D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated)]
2021-01-22 13:47:47 INFO  com.xietian.graduated.GraduatedApplication [No active profile set, falling back to default profiles: default]
2021-01-22 13:47:47 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable]
2021-01-22 13:47:47 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG']
2021-01-22 13:47:48 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Multiple Spring Data modules found, entering strict repository configuration mode!]
2021-01-22 13:47:48 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Bootstrapping Spring Data Redis repositories in DEFAULT mode.]
2021-01-22 13:47:48 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.]
2021-01-22 13:47:48 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat initialized with port(s): 8088 (https) 8086 (http)]
2021-01-22 13:47:49 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 13:47:49 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["http-nio-8086"]]
2021-01-22 13:47:49 INFO  org.apache.catalina.core.StandardService [Starting service [Tomcat]]
2021-01-22 13:47:49 INFO  org.apache.catalina.core.StandardEngine [Starting Servlet engine: [Apache Tomcat/9.0.39]]
2021-01-22 13:47:49 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring embedded WebApplicationContext]
2021-01-22 13:47:49 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [Root WebApplicationContext: initialization completed in 1701 ms]
2021-01-22 13:47:50 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor [Initializing ExecutorService 'applicationTaskExecutor']
2021-01-22 13:47:50 INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [LiveReload server is running on port 35729]
2021-01-22 13:47:50 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler [Initializing ExecutorService 'taskScheduler']
2021-01-22 13:47:50 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 13:47:50 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["http-nio-8086"]]
2021-01-22 13:47:50 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat started on port(s): 8088 (https) 8086 (http) with context path '']
2021-01-22 13:47:50 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Context refreshed]
2021-01-22 13:47:50 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Found 1 custom documentation plugin(s)]
2021-01-22 13:47:50 INFO  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner [Scanning for api listing references]
2021-01-22 13:47:51 INFO  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator [Generating unique operation named: getByIdUsingGET_1]
2021-01-22 13:47:51 INFO  com.xietian.graduated.GraduatedApplication [Started GraduatedApplication in 4.608 seconds (JVM running for 5.952)]
2021-01-22 13:47:55 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Starting...]
2021-01-22 13:47:56 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Start completed.]
2021-01-22 13:52:25 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring DispatcherServlet 'dispatcherServlet']
2021-01-22 13:52:25 INFO  org.springframework.web.servlet.DispatcherServlet [Initializing Servlet 'dispatcherServlet']
2021-01-22 13:52:25 INFO  org.springframework.web.servlet.DispatcherServlet [Completed initialization in 1 ms]
2021-01-22 16:35:41 WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver [Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public com.xietian.graduated.common.util.Result<java.lang.String> com.xietian.graduated.controller.OrderItemController.addItem(com.xietian.graduated.dto.ItemDto): [Field error in object 'itemDto' on field 'idnum': rejected value [null]; codes [NotNull.itemDto.idnum,NotNull.idnum,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [itemDto.idnum,idnum]; arguments []; default message [idnum]]; default message [身份证号不能为空]] ]]
2021-01-22 16:35:41 WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver [Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public com.xietian.graduated.common.util.Result<java.lang.String> com.xietian.graduated.controller.OrderItemController.addItem(com.xietian.graduated.dto.ItemDto): [Field error in object 'itemDto' on field 'idnum': rejected value [null]; codes [NotNull.itemDto.idnum,NotNull.idnum,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [itemDto.idnum,idnum]; arguments []; default message [idnum]]; default message [身份证号不能为空]] ]]
2021-01-22 16:35:41 WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver [Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public com.xietian.graduated.common.util.Result<java.lang.String> com.xietian.graduated.controller.OrderItemController.addItem(com.xietian.graduated.dto.ItemDto): [Field error in object 'itemDto' on field 'idnum': rejected value [null]; codes [NotNull.itemDto.idnum,NotNull.idnum,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [itemDto.idnum,idnum]; arguments []; default message [idnum]]; default message [身份证号不能为空]] ]]
2021-01-22 16:35:41 WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver [Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public com.xietian.graduated.common.util.Result<java.lang.String> com.xietian.graduated.controller.OrderItemController.addItem(com.xietian.graduated.dto.ItemDto): [Field error in object 'itemDto' on field 'idnum': rejected value [null]; codes [NotNull.itemDto.idnum,NotNull.idnum,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [itemDto.idnum,idnum]; arguments []; default message [idnum]]; default message [身份证号不能为空]] ]]
2021-01-22 16:35:41 WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver [Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public com.xietian.graduated.common.util.Result<java.lang.String> com.xietian.graduated.controller.OrderItemController.addItem(com.xietian.graduated.dto.ItemDto): [Field error in object 'itemDto' on field 'idnum': rejected value [null]; codes [NotNull.itemDto.idnum,NotNull.idnum,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [itemDto.idnum,idnum]; arguments []; default message [idnum]]; default message [身份证号不能为空]] ]]
2021-01-22 16:35:41 WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver [Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public com.xietian.graduated.common.util.Result<java.lang.String> com.xietian.graduated.controller.OrderItemController.addItem(com.xietian.graduated.dto.ItemDto): [Field error in object 'itemDto' on field 'idnum': rejected value [null]; codes [NotNull.itemDto.idnum,NotNull.idnum,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [itemDto.idnum,idnum]; arguments []; default message [idnum]]; default message [身份证号不能为空]] ]]
2021-01-22 16:35:41 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5
### The error may involve com.xietian.graduated.dao.OrderMapper.updateByExampleSelective-Inline
### The error occurred while setting parameters
### SQL: update `order`                           WHERE (  o_id = ? )
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5] with root cause]
java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.GeneratedMethodAccessor83.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy82.updateByExampleSelective(Unknown Source)
	at com.xietian.graduated.service.impl.OrderServiceImpl.updateOrderTotalPrice(OrderServiceImpl.java:64)
	at com.xietian.graduated.controller.OrderController.updateTotalPrice(OrderController.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:807)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1061)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.xietian.graduated.common.config.CorsFilter.doFilter(CorsFilter.java:24)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:667)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2021-01-22 16:35:52 WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver [Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]]
2021-01-22 16:36:04 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5
### The error may involve com.xietian.graduated.dao.OrderMapper.updateByExampleSelective-Inline
### The error occurred while setting parameters
### SQL: update `order`                           WHERE (  o_id = ? )
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5] with root cause]
java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 1 )' at line 5
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.GeneratedMethodAccessor83.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy82.updateByExampleSelective(Unknown Source)
	at com.xietian.graduated.service.impl.OrderServiceImpl.updateOrderTotalPrice(OrderServiceImpl.java:64)
	at com.xietian.graduated.controller.OrderController.updateTotalPrice(OrderController.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:807)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1061)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.xietian.graduated.common.config.CorsFilter.doFilter(CorsFilter.java:24)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:667)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2021-01-22 16:37:59 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 2 )' at line 5
### The error may involve com.xietian.graduated.dao.OrderMapper.updateByExampleSelective-Inline
### The error occurred while setting parameters
### SQL: update `order`                           WHERE (  o_id = ? )
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 2 )' at line 5
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 2 )' at line 5] with root cause]
java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 2 )' at line 5
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.GeneratedMethodAccessor83.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy82.updateByExampleSelective(Unknown Source)
	at com.xietian.graduated.service.impl.OrderServiceImpl.updateOrderTotalPrice(OrderServiceImpl.java:64)
	at com.xietian.graduated.controller.OrderController.updateTotalPrice(OrderController.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:807)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1061)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.xietian.graduated.common.config.CorsFilter.doFilter(CorsFilter.java:24)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:667)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2021-01-22 16:41:46 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 3 )' at line 5
### The error may involve com.xietian.graduated.dao.OrderMapper.updateByExampleSelective-Inline
### The error occurred while setting parameters
### SQL: update `order`                           WHERE (  o_id = ? )
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 3 )' at line 5
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 3 )' at line 5] with root cause]
java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE (  o_id = 3 )' at line 5
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.GeneratedMethodAccessor83.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy82.updateByExampleSelective(Unknown Source)
	at com.xietian.graduated.service.impl.OrderServiceImpl.updateOrderTotalPrice(OrderServiceImpl.java:64)
	at com.xietian.graduated.controller.OrderController.updateTotalPrice(OrderController.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:807)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1061)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.xietian.graduated.common.config.CorsFilter.doFilter(CorsFilter.java:24)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:667)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2021-01-22 16:49:13 INFO  org.hibernate.validator.internal.util.Version [HV000001: Hibernate Validator 5.4.1.Final]
2021-01-22 16:49:13 INFO  com.xietian.graduated.GraduatedApplication [Starting GraduatedApplication using Java 1.8.0_271 on DESKTOP-CKPKB5K with PID 13876 (D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes started by Administrator in D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated)]
2021-01-22 16:49:13 INFO  com.xietian.graduated.GraduatedApplication [No active profile set, falling back to default profiles: default]
2021-01-22 16:49:13 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable]
2021-01-22 16:49:13 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG']
2021-01-22 16:49:14 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Multiple Spring Data modules found, entering strict repository configuration mode!]
2021-01-22 16:49:14 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Bootstrapping Spring Data Redis repositories in DEFAULT mode.]
2021-01-22 16:49:14 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.]
2021-01-22 16:49:14 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat initialized with port(s): 8088 (https) 8086 (http)]
2021-01-22 16:49:14 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 16:49:14 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["http-nio-8086"]]
2021-01-22 16:49:14 INFO  org.apache.catalina.core.StandardService [Starting service [Tomcat]]
2021-01-22 16:49:14 INFO  org.apache.catalina.core.StandardEngine [Starting Servlet engine: [Apache Tomcat/9.0.39]]
2021-01-22 16:49:14 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring embedded WebApplicationContext]
2021-01-22 16:49:14 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [Root WebApplicationContext: initialization completed in 1300 ms]
2021-01-22 16:49:15 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor [Initializing ExecutorService 'applicationTaskExecutor']
2021-01-22 16:49:15 INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [LiveReload server is running on port 35729]
2021-01-22 16:49:16 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler [Initializing ExecutorService 'taskScheduler']
2021-01-22 16:49:16 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 16:49:16 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["http-nio-8086"]]
2021-01-22 16:49:16 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat started on port(s): 8088 (https) 8086 (http) with context path '']
2021-01-22 16:49:16 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Context refreshed]
2021-01-22 16:49:16 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Found 1 custom documentation plugin(s)]
2021-01-22 16:49:16 INFO  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner [Scanning for api listing references]
2021-01-22 16:49:16 INFO  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator [Generating unique operation named: getByIdUsingGET_1]
2021-01-22 16:49:16 INFO  com.xietian.graduated.GraduatedApplication [Started GraduatedApplication in 3.983 seconds (JVM running for 4.855)]
2021-01-22 16:49:21 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Starting...]
2021-01-22 16:49:21 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Start completed.]
2021-01-22 16:49:21 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:49:21 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 16:49:21.599(Timestamp)]
2021-01-22 16:49:21 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 16:49:21 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:49:21 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 16:49:21.91(Timestamp)]
2021-01-22 16:49:21 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 16:49:26 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where timestampdiff(HOUR,?,start_time) > 0 and timestampdiff(HOUR,?,start_time) < 3 ]
2021-01-22 16:49:26 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==> Parameters: 2021-01-22 16:49:26.598(Timestamp), 2021-01-22 16:49:26.598(Timestamp)]
2021-01-22 16:49:26 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [<==      Total: 0]
2021-01-22 16:51:11 INFO  org.hibernate.validator.internal.util.Version [HV000001: Hibernate Validator 5.4.1.Final]
2021-01-22 16:51:11 INFO  com.xietian.graduated.GraduatedApplication [Starting GraduatedApplication using Java 1.8.0_271 on DESKTOP-CKPKB5K with PID 9584 (D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes started by Administrator in D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated)]
2021-01-22 16:51:11 INFO  com.xietian.graduated.GraduatedApplication [No active profile set, falling back to default profiles: default]
2021-01-22 16:51:11 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable]
2021-01-22 16:51:11 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG']
2021-01-22 16:51:12 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Multiple Spring Data modules found, entering strict repository configuration mode!]
2021-01-22 16:51:12 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Bootstrapping Spring Data Redis repositories in DEFAULT mode.]
2021-01-22 16:51:12 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.]
2021-01-22 16:51:12 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat initialized with port(s): 8088 (https) 8086 (http)]
2021-01-22 16:51:12 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 16:51:12 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["http-nio-8086"]]
2021-01-22 16:51:12 INFO  org.apache.catalina.core.StandardService [Starting service [Tomcat]]
2021-01-22 16:51:12 INFO  org.apache.catalina.core.StandardEngine [Starting Servlet engine: [Apache Tomcat/9.0.39]]
2021-01-22 16:51:12 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring embedded WebApplicationContext]
2021-01-22 16:51:12 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [Root WebApplicationContext: initialization completed in 1238 ms]
2021-01-22 16:51:12 WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightController': Unsatisfied dependency expressed through field 'flightService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightServiceImpl': Unsatisfied dependency expressed through field 'flightMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightMapper' defined in file [D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes\com\xietian\graduated\dao\FlightMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.IllegalStateException: Property 'configuration' and 'configLocation' can not specified with together]
2021-01-22 16:51:12 INFO  org.apache.catalina.core.StandardService [Stopping service [Tomcat]]
2021-01-22 16:51:12 INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.]
2021-01-22 16:51:12 ERROR org.springframework.boot.SpringApplication [Application run failed]
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightController': Unsatisfied dependency expressed through field 'flightService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightServiceImpl': Unsatisfied dependency expressed through field 'flightMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightMapper' defined in file [D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes\com\xietian\graduated\dao\FlightMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.IllegalStateException: Property 'configuration' and 'configLocation' can not specified with together
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:588)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:767)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:326)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1309)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1298)
	at com.xietian.graduated.GraduatedApplication.main(GraduatedApplication.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightServiceImpl': Unsatisfied dependency expressed through field 'flightMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightMapper' defined in file [D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes\com\xietian\graduated\dao\FlightMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.IllegalStateException: Property 'configuration' and 'configLocation' can not specified with together
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1367)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'flightMapper' defined in file [D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes\com\xietian\graduated\dao\FlightMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.IllegalStateException: Property 'configuration' and 'configLocation' can not specified with together
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1518)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1401)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1367)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 38 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.IllegalStateException: Property 'configuration' and 'configLocation' can not specified with together
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1179)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:571)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1367)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1503)
	... 49 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.IllegalStateException: Property 'configuration' and 'configLocation' can not specified with together
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 62 common frames omitted
Caused by: java.lang.IllegalStateException: Property 'configuration' and 'configLocation' can not specified with together
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:377)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:547)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:153)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$1df79471.CGLIB$sqlSessionFactory$0(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$1df79471$$FastClassBySpringCGLIB$$c240187.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$1df79471.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 63 common frames omitted
2021-01-22 16:51:57 INFO  org.hibernate.validator.internal.util.Version [HV000001: Hibernate Validator 5.4.1.Final]
2021-01-22 16:51:57 INFO  com.xietian.graduated.GraduatedApplication [Starting GraduatedApplication using Java 1.8.0_271 on DESKTOP-CKPKB5K with PID 2348 (D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes started by Administrator in D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated)]
2021-01-22 16:51:57 INFO  com.xietian.graduated.GraduatedApplication [No active profile set, falling back to default profiles: default]
2021-01-22 16:51:57 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable]
2021-01-22 16:51:57 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG']
2021-01-22 16:51:58 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Multiple Spring Data modules found, entering strict repository configuration mode!]
2021-01-22 16:51:58 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Bootstrapping Spring Data Redis repositories in DEFAULT mode.]
2021-01-22 16:51:58 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.]
2021-01-22 16:51:58 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat initialized with port(s): 8088 (https) 8086 (http)]
2021-01-22 16:51:58 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 16:51:58 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["http-nio-8086"]]
2021-01-22 16:51:58 INFO  org.apache.catalina.core.StandardService [Starting service [Tomcat]]
2021-01-22 16:51:58 INFO  org.apache.catalina.core.StandardEngine [Starting Servlet engine: [Apache Tomcat/9.0.39]]
2021-01-22 16:51:58 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring embedded WebApplicationContext]
2021-01-22 16:51:58 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [Root WebApplicationContext: initialization completed in 1443 ms]
2021-01-22 16:51:59 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor [Initializing ExecutorService 'applicationTaskExecutor']
2021-01-22 16:51:59 INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [LiveReload server is running on port 35729]
2021-01-22 16:51:59 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler [Initializing ExecutorService 'taskScheduler']
2021-01-22 16:51:59 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 16:52:00 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["http-nio-8086"]]
2021-01-22 16:52:00 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat started on port(s): 8088 (https) 8086 (http) with context path '']
2021-01-22 16:52:00 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Context refreshed]
2021-01-22 16:52:00 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Found 1 custom documentation plugin(s)]
2021-01-22 16:52:00 INFO  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner [Scanning for api listing references]
2021-01-22 16:52:00 INFO  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator [Generating unique operation named: getByIdUsingGET_1]
2021-01-22 16:52:00 INFO  com.xietian.graduated.GraduatedApplication [Started GraduatedApplication in 3.649 seconds (JVM running for 4.496)]
2021-01-22 16:52:05 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Starting...]
2021-01-22 16:52:05 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Start completed.]
2021-01-22 16:52:05 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:52:05 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 16:52:05.225(Timestamp)]
2021-01-22 16:52:05 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 16:52:05 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:52:05 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 16:52:05.478(Timestamp)]
2021-01-22 16:52:05 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 16:52:07 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring DispatcherServlet 'dispatcherServlet']
2021-01-22 16:52:07 INFO  org.springframework.web.servlet.DispatcherServlet [Initializing Servlet 'dispatcherServlet']
2021-01-22 16:52:07 INFO  org.springframework.web.servlet.DispatcherServlet [Completed initialization in 1 ms]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 16:52:07 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 16:52:08 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 16:52:08 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 16:52:08 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where timestampdiff(HOUR,?,start_time) > 0 and timestampdiff(HOUR,?,start_time) < 3 ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==> Parameters: 2021-01-22 16:52:10.224(Timestamp), 2021-01-22 16:52:10.224(Timestamp)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 4(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET o_id = ?, total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 4(Integer), 0(BigDecimal), 4(Integer)]
2021-01-22 16:52:10 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 5(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET o_id = ?, total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 5(Integer), 0(BigDecimal), 5(Integer)]
2021-01-22 16:52:49 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 16:53:43 INFO  org.hibernate.validator.internal.util.Version [HV000001: Hibernate Validator 5.4.1.Final]
2021-01-22 16:53:43 INFO  com.xietian.graduated.GraduatedApplication [Starting GraduatedApplication using Java 1.8.0_271 on DESKTOP-CKPKB5K with PID 12356 (D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes started by Administrator in D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated)]
2021-01-22 16:53:43 INFO  com.xietian.graduated.GraduatedApplication [No active profile set, falling back to default profiles: default]
2021-01-22 16:53:43 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable]
2021-01-22 16:53:43 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG']
2021-01-22 16:53:44 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Multiple Spring Data modules found, entering strict repository configuration mode!]
2021-01-22 16:53:44 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Bootstrapping Spring Data Redis repositories in DEFAULT mode.]
2021-01-22 16:53:44 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.]
2021-01-22 16:53:44 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat initialized with port(s): 8088 (https) 8086 (http)]
2021-01-22 16:53:44 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 16:53:44 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["http-nio-8086"]]
2021-01-22 16:53:44 INFO  org.apache.catalina.core.StandardService [Starting service [Tomcat]]
2021-01-22 16:53:44 INFO  org.apache.catalina.core.StandardEngine [Starting Servlet engine: [Apache Tomcat/9.0.39]]
2021-01-22 16:53:44 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring embedded WebApplicationContext]
2021-01-22 16:53:44 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [Root WebApplicationContext: initialization completed in 1171 ms]
2021-01-22 16:53:45 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor [Initializing ExecutorService 'applicationTaskExecutor']
2021-01-22 16:53:45 INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [LiveReload server is running on port 35729]
2021-01-22 16:53:45 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler [Initializing ExecutorService 'taskScheduler']
2021-01-22 16:53:45 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 16:53:46 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["http-nio-8086"]]
2021-01-22 16:53:46 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat started on port(s): 8088 (https) 8086 (http) with context path '']
2021-01-22 16:53:46 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Context refreshed]
2021-01-22 16:53:46 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Found 1 custom documentation plugin(s)]
2021-01-22 16:53:46 INFO  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner [Scanning for api listing references]
2021-01-22 16:53:46 INFO  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator [Generating unique operation named: getByIdUsingGET_1]
2021-01-22 16:53:46 INFO  com.xietian.graduated.GraduatedApplication [Started GraduatedApplication in 3.259 seconds (JVM running for 4.045)]
2021-01-22 16:53:51 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Starting...]
2021-01-22 16:53:51 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Start completed.]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 16:53:51.207(Timestamp)]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 2]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 4(Integer)]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 5(Integer)]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 16:53:51.458(Timestamp)]
2021-01-22 16:53:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 2]
2021-01-22 16:53:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where timestampdiff(HOUR,?,start_time) > 0 and timestampdiff(HOUR,?,start_time) < 3 ]
2021-01-22 16:53:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==> Parameters: 2021-01-22 16:53:56.207(Timestamp), 2021-01-22 16:53:56.207(Timestamp)]
2021-01-22 16:53:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [<==      Total: 0]
2021-01-22 16:55:28 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring DispatcherServlet 'dispatcherServlet']
2021-01-22 16:55:28 INFO  org.springframework.web.servlet.DispatcherServlet [Initializing Servlet 'dispatcherServlet']
2021-01-22 16:55:28 INFO  org.springframework.web.servlet.DispatcherServlet [Completed initialization in 1 ms]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 16:55:28 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 6(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 6(Integer)]
2021-01-22 16:55:34 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 16:55:51.467(Timestamp)]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 6(Integer)]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 16:55:51.474(Timestamp)]
2021-01-22 16:55:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 16:56:08 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 16:56:22 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 7(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 7(Integer)]
2021-01-22 16:56:28 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 16:57:51.484(Timestamp)]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 7(Integer)]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 16:57:51.49(Timestamp)]
2021-01-22 16:57:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 16:57:59 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 16:57:59 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 16:57:59 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 16:57:59 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 16:57:59 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 16:57:59 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 8(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 8(Integer)]
2021-01-22 16:58:00 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 16:58:16 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 9(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 9(Integer)]
2021-01-22 16:58:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 16:59:51.499(Timestamp)]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 2]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 8(Integer)]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 9(Integer)]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 16:59:51.505(Timestamp)]
2021-01-22 16:59:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 2]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:00:33 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:00:41 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 10(Integer)]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 10(Integer)]
2021-01-22 17:00:42 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:01:51.511(Timestamp)]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 10(Integer)]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:01:51.517(Timestamp)]
2021-01-22 17:01:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:03:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:03:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:03:51.525(Timestamp)]
2021-01-22 17:03:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 17:03:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:03:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:03:51.526(Timestamp)]
2021-01-22 17:03:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 17:03:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where timestampdiff(HOUR,?,start_time) > 0 and timestampdiff(HOUR,?,start_time) < 3 ]
2021-01-22 17:03:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==> Parameters: 2021-01-22 17:03:56.211(Timestamp), 2021-01-22 17:03:56.211(Timestamp)]
2021-01-22 17:03:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [<==      Total: 0]
2021-01-22 17:05:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:05:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:05:51.528(Timestamp)]
2021-01-22 17:05:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 17:05:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:05:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:05:51.531(Timestamp)]
2021-01-22 17:05:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:06:14 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 11(Integer)]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 11(Integer)]
2021-01-22 17:06:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:07:51.535(Timestamp)]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 11(Integer)]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:07:51.54(Timestamp)]
2021-01-22 17:07:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:08:13 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:08:20 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 12(Integer)]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 12(Integer)]
2021-01-22 17:08:23 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:09:51.548(Timestamp)]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 12(Integer)]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:09:51.556(Timestamp)]
2021-01-22 17:09:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:11:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:11:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:11:51.564(Timestamp)]
2021-01-22 17:11:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 17:11:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:11:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:11:51.567(Timestamp)]
2021-01-22 17:11:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 17:13:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:13:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:13:51.57(Timestamp)]
2021-01-22 17:13:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 17:13:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:13:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:13:51.573(Timestamp)]
2021-01-22 17:13:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 17:13:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where timestampdiff(HOUR,?,start_time) > 0 and timestampdiff(HOUR,?,start_time) < 3 ]
2021-01-22 17:13:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==> Parameters: 2021-01-22 17:13:56.214(Timestamp), 2021-01-22 17:13:56.214(Timestamp)]
2021-01-22 17:13:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [<==      Total: 0]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.FlightMapper.selectByDetail [==>  Preparing: SELECT f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination FROM flight WHERE `from`=? and destination=? and ( datediff ( start_time , ? ) = 0 ); ]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.FlightMapper.selectByDetail [==> Parameters: 广州(String), 上海(String), 2021-05-01 00:00:00.0(Timestamp)]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.FlightMapper.selectByDetail [<==      Total: 3]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 3(Integer)]
2021-01-22 17:15:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:15:47 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:15:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:15:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:15:51.579(Timestamp)]
2021-01-22 17:15:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 17:15:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:15:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:15:51.582(Timestamp)]
2021-01-22 17:15:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 13(Integer)]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 13(Integer)]
2021-01-22 17:15:53 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:17:51.586(Timestamp)]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 13(Integer)]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:17:51.589(Timestamp)]
2021-01-22 17:17:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:18:50 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:19:00 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:19:06 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:19:10 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:19:15 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:19:51.595(Timestamp)]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 14(Integer)]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:19:51.6(Timestamp)]
2021-01-22 17:19:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:20:34 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:20:38 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:20:46 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:20:46 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:20:46 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:20:46 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:20:46 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:20:46 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:21:05 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:21:07 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 16(Integer)]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 16(Integer)]
2021-01-22 17:21:11 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:21:51.609(Timestamp)]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 2]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 15(Integer)]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 16(Integer)]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:21:51.613(Timestamp)]
2021-01-22 17:21:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 2]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:22:00 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:23:20 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:23:24 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 17(Integer)]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 17(Integer)]
2021-01-22 17:23:30 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:23:51.619(Timestamp)]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 17(Integer)]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:23:51.625(Timestamp)]
2021-01-22 17:23:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:23:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where timestampdiff(HOUR,?,start_time) > 0 and timestampdiff(HOUR,?,start_time) < 3 ]
2021-01-22 17:23:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==> Parameters: 2021-01-22 17:23:56.218(Timestamp), 2021-01-22 17:23:56.218(Timestamp)]
2021-01-22 17:23:56 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [<==      Total: 0]
2021-01-22 17:25:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:25:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:25:51.633(Timestamp)]
2021-01-22 17:25:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 17:25:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:25:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:25:51.636(Timestamp)]
2021-01-22 17:25:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:27:40 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:27:47 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 0(Integer)]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 0]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 18(Integer)]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 18(Integer)]
2021-01-22 17:27:50 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:27:51.64(Timestamp)]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 18(Integer)]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:27:51.644(Timestamp)]
2021-01-22 17:27:51 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:29:53 INFO  org.hibernate.validator.internal.util.Version [HV000001: Hibernate Validator 5.4.1.Final]
2021-01-22 17:29:53 INFO  com.xietian.graduated.GraduatedApplication [Starting GraduatedApplication using Java 1.8.0_271 on DESKTOP-CKPKB5K with PID 14240 (D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated\target\classes started by Administrator in D:\IDE\IntelliJ IDEA 2019.3.5\project\graduated)]
2021-01-22 17:29:53 INFO  com.xietian.graduated.GraduatedApplication [No active profile set, falling back to default profiles: default]
2021-01-22 17:29:53 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable]
2021-01-22 17:29:53 INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor [For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG']
2021-01-22 17:29:54 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Multiple Spring Data modules found, entering strict repository configuration mode!]
2021-01-22 17:29:54 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Bootstrapping Spring Data Redis repositories in DEFAULT mode.]
2021-01-22 17:29:54 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate [Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.]
2021-01-22 17:29:54 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat initialized with port(s): 8088 (https) 8086 (http)]
2021-01-22 17:29:54 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 17:29:54 INFO  org.apache.coyote.http11.Http11NioProtocol [Initializing ProtocolHandler ["http-nio-8086"]]
2021-01-22 17:29:54 INFO  org.apache.catalina.core.StandardService [Starting service [Tomcat]]
2021-01-22 17:29:54 INFO  org.apache.catalina.core.StandardEngine [Starting Servlet engine: [Apache Tomcat/9.0.39]]
2021-01-22 17:29:54 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring embedded WebApplicationContext]
2021-01-22 17:29:54 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [Root WebApplicationContext: initialization completed in 1201 ms]
2021-01-22 17:29:55 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor [Initializing ExecutorService 'applicationTaskExecutor']
2021-01-22 17:29:55 INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [LiveReload server is running on port 35729]
2021-01-22 17:29:55 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler [Initializing ExecutorService 'taskScheduler']
2021-01-22 17:29:55 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["https-jsse-nio-8088"]]
2021-01-22 17:29:56 INFO  org.apache.coyote.http11.Http11NioProtocol [Starting ProtocolHandler ["http-nio-8086"]]
2021-01-22 17:29:56 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer [Tomcat started on port(s): 8088 (https) 8086 (http) with context path '']
2021-01-22 17:29:56 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Context refreshed]
2021-01-22 17:29:56 INFO  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper [Found 1 custom documentation plugin(s)]
2021-01-22 17:29:56 INFO  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner [Scanning for api listing references]
2021-01-22 17:29:56 INFO  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator [Generating unique operation named: getByIdUsingGET_1]
2021-01-22 17:29:56 INFO  com.xietian.graduated.GraduatedApplication [Started GraduatedApplication in 3.398 seconds (JVM running for 4.299)]
2021-01-22 17:30:01 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Starting...]
2021-01-22 17:30:01 INFO  com.zaxxer.hikari.HikariDataSource [HikariPool-1 - Start completed.]
2021-01-22 17:30:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:30:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:30:01.317(Timestamp)]
2021-01-22 17:30:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 0]
2021-01-22 17:30:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:30:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:30:01.544(Timestamp)]
2021-01-22 17:30:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 0]
2021-01-22 17:30:06 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where timestampdiff(HOUR,?,start_time) > 0 and timestampdiff(HOUR,?,start_time) < 3 ]
2021-01-22 17:30:06 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [==> Parameters: 2021-01-22 17:30:06.318(Timestamp), 2021-01-22 17:30:06.318(Timestamp)]
2021-01-22 17:30:06 DEBUG com.xietian.graduated.dao.FlightMapper.getEnableDistributeFlight [<==      Total: 0]
2021-01-22 17:30:23 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [Initializing Spring DispatcherServlet 'dispatcherServlet']
2021-01-22 17:30:23 INFO  org.springframework.web.servlet.DispatcherServlet [Initializing Servlet 'dispatcherServlet']
2021-01-22 17:30:23 INFO  org.springframework.web.servlet.DispatcherServlet [Completed initialization in 1 ms]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:30:23 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 19(Integer)]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 19(Integer)]
2021-01-22 17:30:43 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:32:01.547(Timestamp)]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 1]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 19(Integer)]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:32:01.551(Timestamp)]
2021-01-22 17:32:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 1]
2021-01-22 17:32:44 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:32:44 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:32:44 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:32:44 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:32:44 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:32:44 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:32:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:32:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 20(Integer)]
2021-01-22 17:32:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:32:45 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:32:45 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 20(Integer)]
2021-01-22 17:32:45 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:33:34 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==>  Preparing: select u_id, u_name, u_realName, u_IDNUM, u_account, u_password, u_salt, u_sex, u_phone, u_email, u_state from user WHERE ( u_account = ? ) ]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==>  Preparing: select pass_id, p_IDNUM, p_realName, u_id from passenger WHERE ( u_id = ? ) ]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [==> Parameters: qsk(String)]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [==> Parameters: 2(Integer)]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.UserMapper.selectByExample [<==      Total: 1]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.PassengerMapper.selectByExample [<==      Total: 6]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==>  Preparing: select t_id, f_id, rank, t_price from ticket WHERE ( f_id = ? ) ]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [==> Parameters: 1(Integer)]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==>  Preparing: select p_id, p_name, p_eco, p_bus, p_fc from plane where p_id = ? ]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.TicketMapper.selectByExample [<==      Total: 3]
2021-01-22 17:33:36 DEBUG com.xietian.graduated.dao.PlaneMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==>  Preparing: insert into `order` (o_id, total_price, u_id, create_time, pay_time, status ) values (?, ?, ?, ?, ?, ? ) ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.insert [==> Parameters: null, 0(BigDecimal), 2(Integer), 2021-01-22(Date), null, 0(Byte)]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.insert [<==    Updates: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` order by o_id desc limit 1 ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [==> Parameters: ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.getLatestOrder [<==      Total: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==>  Preparing: select f_id, f_name, p_id, f_eco, f_bus, f_fc, start_time, end_time, `from`, destination from flight where f_id = ? ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [==> Parameters: 1(Integer)]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.FlightMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.FlightMapper.ticketSoldFc [==>  Preparing: UPDATE flight SET f_fc = f_fc - ? WHERE f_id = ? ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.FlightMapper.ticketSoldFc [==> Parameters: 1(Integer), 1(Integer)]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.FlightMapper.ticketSoldFc [<==    Updates: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.insert [==>  Preparing: insert into order_item (item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat) values (?, ?, ?, ?, ?, ?, ?) ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.insert [==> Parameters: null, 21(Integer), 3(Integer), 2(Integer), 440902199809120436(String), 998.0000(BigDecimal), none(String)]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.insert [<==    Updates: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 21(Integer)]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 1]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==>  Preparing: update `order` SET total_price = ? WHERE ( o_id = ? ) ]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [==> Parameters: 0(BigDecimal), 21(Integer)]
2021-01-22 17:33:45 DEBUG com.xietian.graduated.dao.OrderMapper.updateByExampleSelective [<==    Updates: 1]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==>  Preparing: select o_id, total_price, u_id, create_time, pay_time, status from `order` where `order`.`status`=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [==> Parameters: 2021-01-22 17:34:01.56(Timestamp)]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderMapper.getOverdueOrder [<==      Total: 2]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 20(Integer)]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 0]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==>  Preparing: select item_id, o_id, t_id, u_id, p_IDNUM, item_price, seat from order_item WHERE ( o_id = ? ) ]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [==> Parameters: 21(Integer)]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderItemMapper.selectByExample [<==      Total: 1]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==>  Preparing: select t_id, f_id, rank, t_price from ticket where t_id = ? ]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [==> Parameters: 3(Integer)]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.TicketMapper.selectByPrimaryKey [<==      Total: 1]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.FlightMapper.ticketSoldFc [==>  Preparing: UPDATE flight SET f_fc = f_fc - ? WHERE f_id = ? ]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.FlightMapper.ticketSoldFc [==> Parameters: -1(Integer), 1(Integer)]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.FlightMapper.ticketSoldFc [<==    Updates: 1]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==>  Preparing: update `order` set status = 2 where status=0 and timestampdiff(MINUTE,create_time,?) > 30 ]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [==> Parameters: 2021-01-22 17:34:01.574(Timestamp)]
2021-01-22 17:34:01 DEBUG com.xietian.graduated.dao.OrderMapper.checkOrder [<==    Updates: 2]
